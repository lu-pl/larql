%ignore COMMENT
%ignore WS

start: query_unit | update_unit

query_unit : query 
query : prologue ( select_query | construct_query | describe_query | ask_query ) values_clause
update_unit : update 

prologue : ( base_decl | prefix_decl )*
base_decl : "BASE"i IRIREF
prefix_decl : "PREFIX"i PNAME_NS IRIREF

select_query : select_clause dataset_clause* where_clause solution_modifier
sub_select : select_clause where_clause solution_modifier values_clause
select_clause : "SELECT"i ( "DISTINCT"i | "REDUCED"i )? ( ( var | ( "(" expression "AS"i var ")" ) )+ | "*" )

construct_query : "CONSTRUCT"i ( construct_template dataset_clause* where_clause solution_modifier | dataset_clause* "WHERE"i "{" triples_template? "}" solution_modifier )
describe_query : "DESCRIBE"i ( var_or_iri+ | "*" ) dataset_clause* where_clause? solution_modifier
ask_query : "ASK"i dataset_clause* where_clause solution_modifier

dataset_clause : "FROM"i ( default_graph_clause | named_graph_clause )
default_graph_clause : source_selector
named_graph_clause : "NAMED"i source_selector
source_selector : iri

where_clause : "WHERE"i? group_graph_pattern
solution_modifier : group_clause? having_clause? order_clause? limit_offset_clause?
group_clause : "GROUP"i "BY"i group_condition
group_condition : built_in_call | function_call | "(" expression ( "AS"i var )? ")" | var
having_clause : "HAVING"i having_condition+
having_condition : constraint

order_clause : "ORDER"i "BY"i order_condition+
order_condition :  ( ( "ASC"i | "DESC"i ) bracketted_expression ) | ( constraint | var ) 

limit_offset_clause : limit_clause offset_clause? | offset_clause | limit_clause?
limit_clause : "LIMIT"i integer
offset_clause : "OFFSET"i integer

values_clause : ( "VALUES"i data_block )?

update : prologue ( update1 ( ";" update )? )?
update1 : load | clear | drop | add | move | copy | create | insert_data | delete_data | delete_where | modify

load : "LOAD"i "SILENT"i? iri ( "INTO"i graph_ref )?
clear : "CLEAR"i "SILENT"i? graph_ref_all
drop : "DROP"i "SILENT"i? graph_ref_all
create : "CREATE"i "SILENT"i? graph_ref
add : "ADD"i "SILENT"i? graph_or_default "TO"i graph_or_default
move : "MOVE"i "SILENT"i? graph_or_default "TO"i graph_or_default
copy :"COPY"i "SILENT"i? graph_or_default "TO"i graph_or_default
insert_data : "INSERT"i "DATA"i quad_data
delete_data : "DELETE"i "DATA"i quad_data
delete_where : "DELETE"i "WHERE"i quad_pattern
modify : ( "WITH"i iri )? ( delete_clause insert_clause? | insert_clause ) using_clause* "WHERE"i group_graph_pattern

delete_clause : "DELETE"i quad_pattern
insert_clause : "INSERT"i quad_pattern
using_clause : "USING"i ( iri | "NAMED"i iri )

graph_or_default : "DEFAULT"i | "GRAPH"i? iri 
graph_ref : "GRAPH"i iri
graph_ref_all : graph_ref | "DEFAULT"i | "NAMED"i | "ALL"i

quad_pattern : "{" quads "}"
quad_data : "{" quads "}"
quads : triples_template? ( quads_not_triples "."? triples_template? )*
quads_not_triples : "GRAPH"i var_or_iri "{" triples_template? "}"
triples_template : triples_same_subject ( "." triples_template? )?

group_graph_pattern : "{" ( sub_select | group_graph_pattern_sub ) "}"
group_graph_pattern_sub : triples_block? ( graph_pattern_not_triples "."? triples_block? )*

triples_block : triples_same_subject_path ( "." triples_block? )?
graph_pattern_not_triples : group_or_union_graph_pattern | optional_graph_pattern | minus_graph_pattern | graph_graph_pattern | service_graph_pattern | filter | bind | inline_data

optional_graph_pattern : "OPTIONAL"i group_graph_pattern
graph_graph_pattern : "GRAPH"i var_or_iri group_graph_pattern

service_graph_pattern : "SERVICE"i "SILENT"i? var_or_iri group_graph_pattern
bind : "BIND"i "(" expression "AS"i var ")"

inline_data : "VALUES"i data_block
data_block : inline_data_one_var | inline_data_full
inline_data_one_var : var | "{" data_block_value* "}"
inline_data_full : ( NIL | "(" var* ")" ) "{" ( "(" data_block_value* ")" | NIL )* "}"

data_block_value : iri | rdf_literal | numeric_literal | boolean_literal | "UNDEF"i

minus_graph_pattern : "MINUS"i group_graph_pattern

group_or_union_graph_pattern : group_graph_pattern ( "UNION"i group_graph_pattern )*

filter : "FILTER"i constraint
constraint : bracketted_expression | built_in_call | function_call
function_call : iri arg_list
arg_list : NIL | "(" "DISTINCT"i? expression ( "," expression )* ")"
expression_list : NIL | "(" expression ( "," expression )* ")"

construct_template : "{" construct_triples? "}"
construct_triples : triples_same_subject ( "." construct_triples? )?
triples_same_subject : var_or_term property_list_not_empty | triples_node property_list
property_list : property_list_not_empty?
property_list_not_empty : verb object_list ( ";" ( verb object_list )? )*
verb : var_or_iri | "a"
object_list : object ( "," object )*
object : graph_node

triples_same_subject_path: var_or_term property_list_path_not_empty | triples_node_path property_list_path
property_list_path : property_list_path_not_empty?
property_list_path_not_empty : ( verb_path | verb_simple ) object_list_path ( ";" ( ( verb_path | verb_simple ) object_list )? )*

verb_path : path
verb_simple: var
object_list_path : object_path ( "," object_path )*
object_path : graph_node_path
path : path_alternative
path_alternative : path_sequence ( "|" path_sequence )*
path_sequence : path_elt_or_inverse ( "/" path_elt_or_inverse )*
path_elt : path_primary path_mod?
path_elt_or_inverse : path_elt | "^" path_elt
path_mod : "?" | "*" | "+"
path_primary : iri | "a" | "!" path_negated_property_set | "(" path ")"
path_negated_property_set : path_one_in_property_set | "(" ( path_one_in_property_set ( "|" path_one_in_property_set )* )? ")"
path_one_in_property_set : iri | "a" | "^" ( iri | "a" )

integer : INTEGER

triples_node : collection | blank_node_property_list
blank_node_property_list : "[" property_list_not_empty "]"
triples_node_path : collection_path | blank_node_property_list_path
blank_node_property_list_path : "[" property_list_path_not_empty "]"
collection : "(" graph_node+ ")"
collection_path : "(" graph_node_path+ ")"
graph_node : var_or_term | triples_node
graph_node_path : var_or_term | triples_node_path

var_or_term : var | graph_term
var_or_iri : var | iri
var : VAR1 | VAR2

graph_term : iri | rdf_literal | numeric_literal | boolean_literal | blank_node | NIL
expression : conditional_or_expression
conditional_or_expression : conditional_and_expression ( "||" conditional_and_expression )*
conditional_and_expression : value_logical ( "&&" value_logical )*
value_logical : relational_expression
relational_expression : numeric_expression ( "=" numeric_expression | "!=" numeric_expression | "<" numeric_expression | ">" numeric_expression | "<=" numeric_expression | ">=" numeric_expression | "IN" expression_list | "NOT" "IN" expression_list )?
numeric_expression : additive_expression

additive_expression : multiplicative_expression ( "+" multiplicative_expression | "-" multiplicative_expression | ( numeric_literal_positive | numeric_literal_negative ) ( ( "*" unary_expression ) | ( "/" unary_expression ) )* )*

multiplicative_expression : unary_expression ( "*" unary_expression | "/" unary_expression )*
unary_expression : "!" primary_expression | "+" primary_expression | "-" primary_expression | primary_expression
primary_expression : bracketted_expression | built_in_call | iri_or_function | rdf_literal | numeric_literal | boolean_literal | var
bracketted_expression : "(" expression ")"

built_in_call : aggregate
| "STR"i "(" expression ")"
| "LANG"i "(" expression ")"
| "LANGMATCHES"i "(" expression "," expression ")"
| "DATATYPE"i "(" expression ")"
| "BOUND"i "(" var ")"
| "IRI"i "(" expression ")"
| "URI"i "(" expression ")"
| "BNODE"i ( "(" expression ")" | NIL )
| "RAND"i NIL
| "ABS"i "(" expression ")"
| "CEIL"i "(" expression ")"
| "FLOOR"i "(" expression ")"
| "ROUND"i "(" expression ")"
| "CONCAT"i expression_list
| substring_expression
| "STRLEN"i "(" expression ")"
| str_replace_expression
| "UCASE"i "(" expression ")"
| "LCASE"i "(" expression ")"
| "ENCODE_FOR_URI"i "(" expression ")"
| "CONTAINS"i "(" expression "," expression ")"
| "STRSTARTS"i "(" expression "," expression ")"
| "STRENDS"i "(" expression "," expression ")"
| "STRBEFORE"i "(" expression "," expression ")"
| "STRAFTER"i "(" expression "," expression ")"
| "YEAR"i "(" expression ")"
| "MONTH"i "(" expression ")"
| "DAY"i "(" expression ")"
| "HOURS"i "(" expression ")"
| "MINUTES"i "(" expression ")"
| "SECONDS"i "(" expression ")"
| "TIMEZONE"i "(" expression ")"
| "TZ"i "(" expression ")"
| "NOW"i NIL
| "UUID"i NIL
| "STRUUID"i NIL
| "MD5"i "(" expression ")"
| "SHA1"i "(" expression ")"
| "SHA256"i "(" expression ")"
| "SHA384"i "(" expression ")"
| "SHA512"i "(" expression ")"
| "COALESCE"i expression_list
| "IF"i "(" expression "," expression "," expression ")"
| "STRLANG"i "(" expression "," expression ")"
| "STRDT"i "(" expression "," expression ")"
| "sameTerm"i "(" expression "," expression ")"
| "isIRI"i "(" expression ")"
| "isURI"i "(" expression ")"
| "isBLANK"i "(" expression ")"
| "isLITERAL"i "(" expression ")"
| "isNUMERIC"i "(" expression ")"
| regex_expression
| exists_func
| not_exists_func

regex_expression : "REGEX"i "(" expression "," expression ( "," expression )? ")"
substring_expression : "SUBSTR"i "(" expression "," expression ( "," expression )? ")"
str_replace_expression : "REPLACE"i "(" expression "," expression "," expression ( "," expression )? ")"
exists_func : "EXISTS"i group_graph_pattern
not_exists_func : "NOT"i "EXISTS"i group_graph_pattern

aggregate : "COUNT"i "(" "DISTINCT"i? ( "*" | expression ) ")"
| "SUM"i "(" "DISTINCT"i? expression ")"
| "MIN"i "(" "DISTINCT"i? expression ")"
| "MAX"i "(" "DISTINCT"i? expression ")"
| "AVG"i "(" "DISTINCT"i? expression ")"
| "SAMPLE"i "(" "DISTINCT"i? expression ")"
| "GROUP_CONCAT"i "(" "DISTINCT"i? expression ( ";" "SEPARATOR"i "=" string )? ")" 

iri_or_function : iri arg_list?
rdf_literal : string ( LANGTAG | ( "^^" iri ) )?
numeric_literal : numeric_literal_unsigned | numeric_literal_positive | numeric_literal_negative
numeric_literal_unsigned : INTEGER | DECIMAL | DOUBLE
numeric_literal_positive : INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE
numeric_literal_negative : INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE
boolean_literal : "true" | "false"
string : STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2
iri : IRIREF | prefixed_name
prefixed_name : PNAME_LN | PNAME_NS
blank_node : BLANK_NODE_LABEL | ANON

# terminals

IRIREF : "<" /[^<>"{}|^`\\\x00-\x20]*/ ">"
PNAME_NS : PN_PREFIX? ":"
PNAME_LN : PNAME_NS PN_LOCAL
BLANK_NODE_LABEL: "_:" (PN_CHARS_U | /[0-9]/) ((PN_CHARS | ".")* PN_CHARS)?
VAR1 : "?" VARNAME
VAR2 : "$" VARNAME
LANGTAG: "@" /[a-zA-Z]+(-[a-zA-Z0-9]+)*/
INTEGER : /[0-9]+/
DECIMAL : /[0-9]+\.[0-9]+/
DOUBLE : /[0-9]+\.[0-9]+/ EXPONENT?  | /[0-9]+/ EXPONENT
INTEGER_POSITIVE : "+" INTEGER
DECIMAL_POSITIVE : "+" DECIMAL
DOUBLE_POSITIVE : "+" DOUBLE
INTEGER_NEGATIVE : "-" INTEGER
DECIMAL_NEGATIVE : "-" DECIMAL
DOUBLE_NEGATIVE : "-" DOUBLE

EXPONENT: /[eE][+-]?[0-9]+/


# note: allow \ in strings for escape sequences
STRING_LITERAL1: "'" (/[^'\n\r]/ | ECHAR)* "'"
STRING_LITERAL2: "\"" (/[^"\n\r]/ | ECHAR)* "\""

STRING_LITERAL_LONG1: "'''" ("'"? "'"? (/[^'\\]/ | ECHAR))* "'''"
STRING_LITERAL_LONG2: "\"\"\"" ("\""? "\""? (/[^"\\]/ | ECHAR))* "\"\"\""
ECHAR: "\\" /[tbnrf"']/

NIL: "(" WS* ")"
WS: /[ \t\r\n]/
ANON: "[" WS* "]"
PN_CHARS_BASE: /[A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\U00010000-\U000EFFFF]/
PN_CHARS_U: PN_CHARS_BASE | "_"
VARNAME: (PN_CHARS_U | /[0-9]/) (PN_CHARS_U | /[0-9\u00B7\u0300-\u036F\u203F-\u2040]/)*
PN_CHARS: PN_CHARS_U | "-" | /[0-9\u00B7\u0300-\u036F\u203F-\u2040]/
PN_PREFIX: PN_CHARS_BASE ((PN_CHARS | ".")* PN_CHARS)?
PN_LOCAL: (PN_CHARS_U | ":" | /[0-9]/ | PLX) ((PN_CHARS | "." | ":" | PLX)* (PN_CHARS | ":" | PLX))?
PLX: PERCENT | PN_LOCAL_ESC
PERCENT: "%" HEX HEX
HEX: /[0-9A-Fa-f]/
PN_LOCAL_ESC: "\\" /[_~\.\-!$&'()*+,;=\/?#@%]/
COMMENT: /#[^\n]*/
